
extract commonalities into methods and classes

-An array will hold the deck.The array will be populated with cards. Cards have a face, suit, and a value. There are 52 cards. 13 faces(1-10, jack-ace, and 4 suits. 4 cards of one face-value for each suit.
Suits: Diamonds, Spades, Clubs, Hearts


-the dealer is an object with an array of cards, his hand. The 'dealer' is a second player on the command line, or the same person playing both roles.

-the player is the user at the command line. There will be a user object, similar to the dealer, also with an array of cards (hand). 

-each time a new card is received (they hit), the card must be added to their hand, and the sum must be calculated to see if a condition exists which will break our loop. Their deck must also be displayed every time so they do not forget. The card is sliced from the deck, and pushed to their hand. A player continues to be prompted to receive another card until they bust or choose to stay.

-the repeating actions go in the loop


									
The card objects, all 52, are instantiated and populated in an array. The array is shuffled.

#each time a card is popped from the deck but BEFORE its pushed to a players hand, we need to check if it is an ace, set the value of 1 or 11, and THEN push it.

Using pop on the deck array twice, the player is dealt two cards from the deck. These two cards are pushed into the hand array. We check for the presenceThe total is calculated to see if 21 has been reached or if they have bust. If either of those occur, they are alerted of a win or a loss and the game ends. If the count is less than 21….

The player can now choose to hit  or stay. After each hit request, a card is sliced from the deck, and pushed to their hand array. Each time, we must calculate the total in their hand to see if they have busted and gone over 21 BEFORE they can choose to act again.

If and when they stay, their total is calculated and stored.


                Now is the dealer's turn…
The dealer MUST hit until either 17 is reached or they bust. the total is calculated every single time a card is added, and checks to see if either 17 is reached or they bust. This is a calculating method specific to the dealer.

if 17 is reached, they will be prompted to choose to hit or stay.
If they hit, as with the player(a common method being used now), we know must check to see if they reach 21 or bust.

When the dealer chooses to stay, we compare the two totals, and the higher one wins, we state the winner, and the game ends.

note: since an ace can be either a 1 or an 11, if an ace is dealt, we need the ace_prompt to prompt the user to see which value they want. we store that value in a variable, and the value of that variable becomes @value in the card object. THEN the ace is pushed to the player's hand. This must occur when the object is sliced from the deck and store in the variable. If card.face == "Ace", ace_prompt runs

puts "Enter your name: "
name = gets.chomp



